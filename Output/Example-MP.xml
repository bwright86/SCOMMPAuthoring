<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>Example.MP</ID>
      <Version>1.0.0.0</Version>
    </Identity>
    <Name>Example Management Pack</Name>
    <References>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>6.1.7221.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SCDW">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.1.10226.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="##CompanyID##.##AppName##.##UniqueID##.Class" Base="Windows!Microsoft.Windows.LocalApplication" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="Version" Type="string" />
          <Property ID="Path" Type="string" />
          <!-- We choose Microsoft.Windows.LocalApplication as our generic base class -->
          <!-- This specific fragment example has class properties for Version and Path as examples only.  You can change or remove these if not desired -->
        </ClassType>
        <ClassType ID="##CompanyID##.##AppName##.##UniqueID##.Class" Base="Windows!Microsoft.Windows.LocalApplication" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="Version" Type="string" />
          <Property ID="Path" Type="string" />
          <!-- We choose Microsoft.Windows.LocalApplication as our generic base class -->
          <!-- This specific fragment example has class properties for Version and Path as examples only.  You can change or remove these if not desired -->
        </ClassType>
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="##CompanyID##.##AppName##.##UniqueID##.Class.Discovery.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="DebugLogging" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ExampleStringValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="DebugLogging" Selector="$Config/DebugLogging$" ParameterType="bool" />
          <OverrideableParameter ID="ExampleStringValue" Selector="$Config/ExampleStringValue$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
                <ScriptName>##CompanyID##.##AppName##.##UniqueID##.Class.Discovery.DS.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Describe Script Here
#
#  Author: 
#  v1.0
#=================================================================================
param($SourceId,$ManagedEntityId,$ComputerName,$MGName,$DebugLogging,$ExampleStringValue)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# $ComputerName = "computername.domain.com"
# $MGName = "MGNAME"
# $DebugLogging = "false"
# $ExampleStringValue = "foo"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "##CompanyID##.##AppName##.##UniqueID##.Class.Discovery.DS.ps1"
$EventID = "1234"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami). `n Management Group: ($MGName).")
#=================================================================================
	

# Discovery Script section - Discovery scripts get this
#=================================================================================
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#=================================================================================	


# Begin MAIN script section
#=================================================================================

#Log script event that shows we passed some custom text as a parameter
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Custom String Parameter was passed to this script as: ($ExampleStringValue)")

#Show concept of additional debug logging
IF ($DebugLogging.ToUpper() -eq "TRUE")
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n This event is being logged because debug Logging was set to: ($DebugLogging)")
}

# Test to see if folder exists
$Folder = "C:\TEST"
$FolderExists = Test-Path $Folder

#Set variables for discovered instances
$Version = "2.0"

# If folder exists create instance of class
If ($FolderExists -eq $true)
{
	$instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='##CompanyID##.##AppName##.##UniqueID##.Class']$")
	$instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
	$instance.AddProperty("$MPElement[Name='##CompanyID##.##AppName##.##UniqueID##.Class']/Version$", $Version)
	$instance.AddProperty("$MPElement[Name='##CompanyID##.##AppName##.##UniqueID##.Class']/Path$", $Folder)
	$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
	$DiscoveryData.AddInstance($instance)
	
	# Log an event that objects were discovered
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Discovery script is returning objects for ($ComputerName)\($Folder)\($Version)") 	
}
Else
{
	# Log an event for no objects discovered
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Discovery script returned no discovered objects") 		
}

# Return Discovery Items Normally           
$DiscoveryData
# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script								
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SourceId</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityId</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ComputerName</Name>
                    <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>MGName</Name>
                    <Value>$Target/ManagementGroup/Name$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>DebugLogging</Name>
                    <Value>$Config/DebugLogging$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ExampleStringValue</Name>
                    <Value>$Config/ExampleStringValue$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="##CompanyID##.##AppName##.##TaskName##.Task.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="Param1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Param2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Param1" Selector="$Config/Param1$" ParameterType="string" />
          <OverrideableParameter ID="Param2" Selector="$Config/Param2$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>##CompanyID##.##AppName##.##TaskName##.Task.WA.ps1</ScriptName>
                <ScriptBody>
                  #=================================================================================
                  #  Script to execute a task in PowerShell
                  #=================================================================================
                  param($Param1, $Param2)				  
                  #=================================================================================
                  # Constants section - modify stuff here:

                  # Assign script name variable for use in event logging
                  $ScriptName = "##CompanyID##.##AppName##.##TaskName##.Task.WA.ps1"
                  #=================================================================================

                  # Gather script start time
                  $StartTime = Get-Date

                  # Gather who the script is running as
                  $whoami = whoami

                  #Load the MOMScript API and discovery propertybag
                  $momapi = New-Object -comObject "Mom.ScriptAPI"

                  #Log script event that we are starting task
                  $momapi.LogScriptEvent($ScriptName,6667,0, "Starting script task.  Running as ($whoami)")

                  # Begin Main Script
                  #=================================================================================
                  Write-Host "PowerShell script executed"
				  Write-Host "Param1: " $Param1
				  Write-Host "Param2: " $Param2
                  #=================================================================================				  

                  # Log an event for script ending and total execution time.
                  $EndTime = Get-Date
                  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                  $momapi.LogScriptEvent($ScriptName,6667,0,"`n Script has completed. `n Runtime was ($ScriptTime) seconds.")
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>Param1</Name>
                    <Value>$Config/Param1$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>Param2</Name>
                    <Value>$Config/Param2$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="##CompanyID##.##AppName##.##UniqueID##.Class.Discovery" Target="Windows!Microsoft.Windows.Server.OperatingSystem" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <!-- We choose Microsoft.Windows.Server.OperatingSystem as the preferred target class to ensure this will run on all Windows Servers, but will not create duplicates on clusters -->
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="##CompanyID##.##AppName##.##UniqueID##.Class">
            <Property PropertyID="Version" />
            <Property PropertyID="Path" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <ScriptName>##CompanyID##.##AppName##.##UniqueID##.Class.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Describe Script Here
#
#  Author: 
#  v1.0
#=================================================================================
param($SourceId,$ManagedEntityId,$ComputerName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# $ComputerName = "computername.domain.com"
# $Computername = 'server.domain.com'
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "##CompanyID##.##AppName##.##UniqueID##.Class.Discovery.ps1"
$EventID = "1234"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================
	

# Discovery Script section - Discovery scripts get this
#=================================================================================
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#=================================================================================	


# Begin MAIN script section
#=================================================================================
# Test to see if folder exists
$Folder = "C:\TEST"
$FolderExists = Test-Path $Folder

#Set variables for discovered instances
$Version = "2.0"

# If folder exists create instance of class
If ($FolderExists -eq $true)
{
	$instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='##CompanyID##.##AppName##.##UniqueID##.Class']$")
	$instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
	$instance.AddProperty("$MPElement[Name='##CompanyID##.##AppName##.##UniqueID##.Class']/Version$", $Version)
	$instance.AddProperty("$MPElement[Name='##CompanyID##.##AppName##.##UniqueID##.Class']/Path$", $Folder)
	$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
	$DiscoveryData.AddInstance($instance)
}
Else
{
	# Log an event for no objects discovered
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Discovery script returned no discovered objects") 		
}

# Return Discovery Items Normally           
$DiscoveryData
# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
          <Parameters>
            <Parameter>
              <Name>SourceID</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>ManagedEntityID</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>ComputerName</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="##CompanyID##.##AppName##.##UniqueID##.Class.Discovery" Target="Windows!Microsoft.Windows.Server.OperatingSystem" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <!-- We choose Microsoft.Windows.Server.OperatingSystem as the preferred target class to ensure this will run on all Windows Servers, but will not create duplicates on clusters -->
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="##CompanyID##.##AppName##.##UniqueID##.Class">
            <Property PropertyID="Version" />
            <Property PropertyID="Path" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="##CompanyID##.##AppName##.##UniqueID##.Class.Discovery.DS">
          <IntervalSeconds>86333</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
          <DebugLogging>false</DebugLogging>
          <ExampleStringValue>foo</ExampleStringValue>
          <!-- This is a simple example of passing a value from a discovery to a datasource as an overrideable parameter.  You should change this or remove it for your design -->
        </DataSource>
      </Discovery>
    </Discoveries>
    <Tasks>
      <Task ID="##CompanyID##.##AppName##.##TaskName##.Task" Accessibility="Public" Enabled="false" Target="##ClassID##" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="CMDWA" TypeID="System!System.CommandExecuter">
          <ApplicationName>%systemroot%\System32\cmd.exe</ApplicationName>
          <WorkingDirectory />
          <CommandLine>/c EVENTCREATE /T ERROR /ID 100 /L APPLICATION /SO TEST /D "This is a Test event 100"</CommandLine>
          <TimeoutSeconds>60</TimeoutSeconds>
          <RequireOutput>true</RequireOutput>
        </WriteAction>
      </Task>
      <Task ID="##CompanyID##.##AppName##.##TaskName##.Task" Accessibility="Public" Enabled="true" Target="##ClassID##" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="##CompanyID##.##AppName##.##TaskName##.Task.WA">
          <Param1>YourStaticParam</Param1>
          <Param2>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Param2>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <!-- Classes -->
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class">
          <Name>##CompanyID## ##AppName## ##UniqueID## Class</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class" SubElementID="Version">
          <Name>Version</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class" SubElementID="Path">
          <Name>Path</Name>
        </DisplayString>
        <!-- Discoveries -->
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class.Discovery">
          <Name>##CompanyID## ##AppName## ##UniqueID## Class Discovery</Name>
        </DisplayString>
        <!-- Classes -->
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class">
          <Name>##CompanyID## ##AppName## ##UniqueID## Class</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class" SubElementID="Version">
          <Name>Version</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class" SubElementID="Path">
          <Name>Path</Name>
        </DisplayString>
        <!-- Discoveries -->
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Class.Discovery">
          <Name>##CompanyID## ##AppName## ##UniqueID## Class Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##TaskName##.Task">
          <Name>##TaskName## Task</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##TaskName##.Task">
          <Name>##TaskName## Task</Name>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles />
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>